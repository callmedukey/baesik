generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MealType {
  LUNCH
  DINNER
}

model Admin {
  id String @id @default(uuid())

  username String @unique
  password String

  posts Posts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id       String  @id @default(uuid())
  fileName String?

  date DateTime @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id       String @id @default(uuid())
  name     String
  username String @unique
  phone    String @unique
  email    String @unique

  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School @relation(fields: [schoolId], references: [id], onDelete: NoAction)
  schoolId String

  posts Posts[]

  meals             Meals[]
  payments          Payments[]
  savedMeals        SavedMeals[]
  refundRequests    RefundRequest[]
  passwordResetCode StudentPasswordResetCode?
  oneTimeUniqueCode StudentOneTimeUniqueCode?
}

model School {
  id String @id @default(uuid())

  name String @unique

  address String?
  phone   String?
  email   String?

  students   Student[]
  schoolUser SchoolUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SchoolUser {
  id String @id @default(uuid())

  name     String
  username String @unique
  email    String
  password String

  phone String @unique

  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school   School? @relation(fields: [schoolId], references: [id], onDelete: NoAction)
  schoolId String?

  passwordResetCode SchoolPasswordResetCode?
  oneTimeUniqueCode SchoolOneTimeUniqueCode?
  Posts             Posts[]
}

model Payments {
  id String @id @default(uuid())

  student Student @relation(fields: [studentId], references: [id], onDelete: NoAction)
  meals   Meals[]

  studentName String
  schoolName  String

  payer      String
  payerPhone String

  amount Int
  paid   Boolean   @default(false)
  paidOn DateTime?

  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefundRequest {
  id String @id @default(uuid())

  student   Student @relation(fields: [studentId], references: [id], onDelete: NoAction)
  studentId String

  amount   Int
  complete Boolean @default(false)

  accountHolder String
  bankDetails   String

  cancelledMeals Meals[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Meals {
  id String @id @default(uuid())

  date     DateTime
  mealType MealType

  isCancelled Boolean @default(false)
  isComplete  Boolean @default(false)

  payments   Payments? @relation(fields: [paymentsId], references: [id], onDelete: Cascade)
  paymentsId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?

  refundRequest   RefundRequest? @relation(fields: [refundRequestId], references: [id], onDelete: Cascade)
  refundRequestId String?
}

model SavedMeals {
  id String @id @default(uuid())

  date     DateTime
  mealType MealType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String?
}

model StudentPasswordResetCode {
  id              String   @id @default(uuid())
  code            String
  student         Student  @relation(fields: [studentUsername], references: [username], onDelete: Cascade)
  studentUsername String   @unique
  createdAt       DateTime @default(now())
}

model SchoolPasswordResetCode {
  id                 String     @id @default(uuid())
  code               String
  schoolUser         SchoolUser @relation(fields: [schoolUserUsername], references: [username], onDelete: Cascade)
  schoolUserUsername String     @unique
  createdAt          DateTime   @default(now())
}

model StudentOneTimeUniqueCode {
  id              String   @id @default(uuid())
  student         Student  @relation(fields: [studentUsername], references: [username], onDelete: Cascade)
  studentUsername String   @unique
  createdAt       DateTime @default(now())
}

model SchoolOneTimeUniqueCode {
  id                 String     @id @default(uuid())
  schoolUser         SchoolUser @relation(fields: [schoolUserUsername], references: [username], onDelete: Cascade)
  schoolUserUsername String     @unique
  createdAt          DateTime   @default(now())
}

model Posts {
  id String @id @default(uuid())

  name    String
  title   String
  content String

  isAdmin     Boolean @default(false)
  isPinned    Boolean @default(false)
  isAnonymous Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin        Admin?      @relation(fields: [adminId], references: [id])
  adminId      String?
  student      Student?    @relation(fields: [studentId], references: [id])
  studentId    String?
  schoolUser   SchoolUser? @relation(fields: [schoolUserId], references: [id])
  schoolUserId String?
}

